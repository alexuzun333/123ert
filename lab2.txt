#include <stdlib.h>
#include <iostream>

// Создаем новую структуру с двумя перменными с типом данных int: a, b.
struct TwoInts
{
    int a;
    int b;
};
// Создаем новую структуру с двумя переменными в первой будет храниться массив с размерностью 4.
// Также создаем указатель с типом данных int который будет называться someNumber.
struct StructWithArray
{
    int arr[4];
    int *someNumber;
};

int main()
{
    TwoInts i2 = {};
    i2.a = 5;
    i2.b = 7;

    std::cout << i2.a << std::endl;
    std::cout << i2.b << std::endl;
    //  Мы резервируем ячейки памяти для наших значений и помещаем туда 5 и 7
    //  эти два числа будут храниться по двум адресам 5 находится по адресу 36,  а b по
    // адресу 40 и занимают  4 байта, так как оба числа помещаются только в 1 байт они занимают
    // только его, а остальные остаются пустыми, потом выводим в консоль эти значения.

    StructWithArray s = {};
    s.arr[0] = 10;

    StructWithArray s1 = {};
    s1.arr[0] = 15;
    //  Первый элемент одного массива становится равным 10 и мы как сверху выделяем ему место
    //  в памяти и находится по адресу 44,тоже самое для другого первого элемента другого массива
    //  и уже его число 15 находится по адресу 68 в памяти, к слову оба этих
    //  элемента занимают по одному
    //  байту памяти потому что эти числа помещаются в 1 байт

    StructWithArray *sPointer = &s;
    sPointer->arr[0] = 20;
    // Сначала показываем то что pointer будет указывать на массив s, а потом
    // перезаписываем значения первого элемента и теперь оно равно 20

    std::cout << s.arr[0] << std::endl;
    s.arr[0] = 25;
    std::cout << s.arr[0] << std::endl;
    sPointer->arr[0] = 30;
    std::cout << s.arr[0] << std::endl;
    // Используем cout что заметить что значения меняются после каждого вывода, затем меняем первый
    // элемент массива на 25, а потом снова через указатель перезаписываем его значение на 30, его
    // значение остается в памяти по тому же адресу.

    sPointer = &s1;
    sPointer->arr[0] = 35;
    std::cout << s.arr[0] << std::endl;
    std::cout << s1.arr[0] << std::endl;
    // Теперь pointer указывает уже на другой массив и мы перезаписываем значение первого элемента
    // массива на 35 и уже выводим в консоль сначала первый элемент первого массива,а потом первый
    // элемент второго массива

    StructWithArray structArray[2] = {};
    structArray[0].arr[3] = 77;
    structArray[1].someNumber = &structArray[0].arr[3];
    // Создается массив из двух структур с размерностью два в четвертый элемент массива
    // первой структуры добавляем элемент 77 далее указатель сам намбер устанавливаем
    // на 4 элемент массива 1 структуры

    sPointer = &s;
    int *pointer = &sPointer->arr[3];
    s.arr[3] = 72;
    std::cout << *pointer;
    // s pointer снова указывает на s создаем указатель поинтер который теперь указывает на
    // четвертый элемент массива на который указывает s pointer теперь устанавливаем значение
    // 4 элемента массива в 72 и выводим его

    StructWithArray memory;
    memset(&memory, 0, sizeof(StructWithArray));
    return 0;
    // Создаем еще одну структуру с помощью функции мемсет заполняем всю память нулями и
    // устанавливаем все ее байты в нулевое значение ну и нолик возвращаем чтобы работало
}
